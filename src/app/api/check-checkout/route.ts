import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function POST(request: NextRequest) {
    try {
        const { userId } = await request.json();

        console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i checkout');

        if (!userId) {
            return NextResponse.json({
                success: false,
                error: 'Thi·∫øu th√¥ng tin userId'
            }, { status: 400 });
        }

        // T√¨m user b·∫±ng clerkId
        const user = await prisma.user.findUnique({
            where: { clerkId: userId }
        });

        if (!user) {
            return NextResponse.json({
                success: false,
                error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
            }, { status: 404 });
        }

        // L·∫•y ng√†y h√¥m nay
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

        // T√¨m b·∫£n ghi ƒëi·ªÉm danh h√¥m nay
        const todayAttendance = await prisma.attendance.findFirst({
            where: {
                userId: user.id,  // ‚úÖ S·ª≠ d·ª•ng user.id t·ª´ database
                date: {
                    gte: startOfDay,
                    lt: endOfDay
                }
            }
        });

        const hasCheckedInToday = !!todayAttendance;
        const hasCheckedOutToday = !!(todayAttendance?.checkOutTime);

        return NextResponse.json({
            success: true,
            hasCheckedInToday,
            hasCheckedOutToday,
            message: hasCheckedOutToday 
                ? 'ƒê√£ checkout h√¥m nay' 
                : !hasCheckedInToday 
                    ? 'Ch∆∞a check-in h√¥m nay'
                    : 'C√≥ th·ªÉ checkout'
        });

    } catch (error) {
        console.error('‚ùå L·ªói ki·ªÉm tra checkout:', error);
        return NextResponse.json({
            success: false,
            error: 'L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i checkout'
        }, { status: 500 });
    }
}