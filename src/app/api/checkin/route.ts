import { NextRequest, NextResponse } from 'next/server';
import  {prisma}  from '@/lib/prisma';
import { checkAttendancePermission } from '@/config/authorized-users';

export async function POST(request: NextRequest) {
    try {
        const { email, name, userId, photoLink } = await request.json();

        console.log('üì® X·ª≠ l√Ω check-in:', { email, name, userId, photoLink });

        // Validation c∆° b·∫£n
        if (!email || !name || !userId) {
            return NextResponse.json({
                success: false,
                error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'
            }, { status: 400 });
        }

        // L·∫•y th√¥ng tin user t·ª´ database ƒë·ªÉ ki·ªÉm tra role
        const user = await prisma.user.findUnique({
            where: { clerkId: userId },  // ‚úÖ S·ª≠a t·ª´ id th√†nh clerkId
            select: { role: true, email: true, name: true, isActive: true, id: true }
        });

        if (!user) {
            return NextResponse.json({
                success: false,
                error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
            }, { status: 404 });
        }

        if (!user.isActive) {
            return NextResponse.json({
                success: false,
                error: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
            }, { status: 403 });
        }

        // Ki·ªÉm tra quy·ªÅn ƒëi·ªÉm danh d·ª±a tr√™n role
        const permissionCheck = checkAttendancePermission(user.role);  // ‚úÖ Ch·ªâ truy·ªÅn user.role

        if (!permissionCheck.allowed) {
            console.log('üö´ Kh√¥ng c√≥ quy·ªÅn ƒëi·ªÉm danh:', permissionCheck.reason);
            return NextResponse.json({
                success: false,
                error: 'access_denied',
                message: permissionCheck.reason,
                details: {
                    userRole: user.role,
                    roleCheck: permissionCheck.roleCheck
                    // ‚úÖ X√≥a emailCheck v√¨ kh√¥ng c√≤n c·∫ßn thi·∫øt
                },
                unauthorized: true
            }, { status: 403 });
        }

        // L·∫•y ng√†y h√¥m nay
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

        // Ki·ªÉm tra ƒë√£ check-in h√¥m nay ch∆∞a
        const existingAttendance = await prisma.attendance.findFirst({
            where: {
                userId: user.id,  // ‚úÖ D√πng user.id t·ª´ database
                date: {
                    gte: startOfDay,
                    lt: endOfDay
                }
            }
        });

        if (existingAttendance) {
            console.log('‚ùå CH·∫∂N: ƒê√£ ƒëi·ªÉm danh h√¥m nay');
            return NextResponse.json({
                success: false,
                error: 'already_checked_in',
                message: 'H√¥m nay b·∫°n ƒë√£ ƒëi·ªÉm danh th√†nh c√¥ng',
                alreadyCheckedIn: true
            }, { status: 409 });
        }

        // T·∫°o b·∫£n ghi ƒëi·ªÉm danh m·ªõi
        const newAttendance = await prisma.attendance.create({
            data: {
                userId: user.id,  // ‚úÖ D√πng user.id t·ª´ database
                checkInTime: new Date(),
                checkInPhoto: photoLink,
                date: startOfDay
            },
            include: {
                user: {
                    select: {
                        email: true,
                        name: true,
                        role: true
                    }
                }
            }
        });

        console.log('‚úÖ Check-in th√†nh c√¥ng!');

        return NextResponse.json({
            success: true,
            message: 'ƒêi·ªÉm danh th√†nh c√¥ng!',
            attendance: {
                id: newAttendance.id,
                checkInTime: newAttendance.checkInTime,
                checkInPhoto: newAttendance.checkInPhoto,
                date: newAttendance.date,
                userRole: newAttendance.user.role
            }
        });

    } catch (error) {
        console.error('‚ùå L·ªói check-in:', error);
        return NextResponse.json({
            success: false,
            error: 'L·ªói server khi th·ª±c hi·ªán check-in',
            details: (error as Error).message
        }, { status: 500 });
    }
}