import { NextRequest, NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import { UserRole } from '@/generated/prisma';
import {prisma} from '@/lib/prisma';

export async function POST(request: NextRequest) {
    try {
        const { confirmCode } = await request.json();

        console.log('=== X√ìA D·ªÆ LI·ªÜU CH·∫§M C√îNG ===');

        // Ki·ªÉm tra authentication
        const user = await currentUser();
        if (!user) {
            console.log('‚ùå CH·∫∂N: Ch∆∞a ƒëƒÉng nh·∫≠p');
            return NextResponse.json({
                success: false,
                error: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.',
                unauthorized: true
            }, { status: 401 });
        }

        // L·∫•y th√¥ng tin user t·ª´ database ƒë·ªÉ ki·ªÉm tra role
        const dbUser = await prisma.user.findUnique({
            where: { clerkId: user.id },
            select: { role: true, email: true, name: true }
        });

        if (!dbUser || dbUser.role !== UserRole.ADMIN) {
            console.log('‚ùå CH·∫∂N: Kh√¥ng c√≥ quy·ªÅn admin', { userRole: dbUser?.role });
            return NextResponse.json({
                success: false,
                error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn admin. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.',
                unauthorized: true
            }, { status: 403 });
        }

        console.log('‚úÖ X√°c th·ª±c admin th√†nh c√¥ng:', { email: dbUser.email, name: dbUser.name });

        // Ki·ªÉm tra m√£ x√°c nh·∫≠n
        if (confirmCode !== 'DELETE MY DATA') {
            return NextResponse.json({
                success: false,
                error: 'M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng. Vui l√≤ng nh·∫≠p: DELETE MY DATA'
            }, { status: 400 });
        }

        // ƒê·∫øm s·ªë b·∫£n ghi ch·∫•m c√¥ng tr∆∞·ªõc khi x√≥a
        const totalRecords = await prisma.attendance.count();
        console.log('üìä T·ªïng s·ªë b·∫£n ghi ch·∫•m c√¥ng:', totalRecords);

        if (totalRecords === 0) {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng ƒë·ªÉ x√≥a');
            return NextResponse.json({
                success: true,
                message: 'Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng ƒë·ªÉ x√≥a',
                deletedRecords: 0
            });
        }

        // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu ch·∫•m c√¥ng
        console.log('üóëÔ∏è ƒêang x√≥a t·∫•t c·∫£ d·ªØ li·ªáu ch·∫•m c√¥ng...');
        
        const deleteResult = await prisma.attendance.deleteMany({});
        
        console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.count} b·∫£n ghi ch·∫•m c√¥ng`);

        return NextResponse.json({
            success: true,
            message: `ƒê√£ x√≥a th√†nh c√¥ng`,
            deletedRecords: deleteResult.count,
            totalRecordsBefore: totalRecords,
            totalRecordsAfter: 0
        });

    } catch (error) {
        console.error('‚ùå L·ªói x√≥a d·ªØ li·ªáu:', error);
        return NextResponse.json({
            success: false,
            error: 'L·ªói server: ' + (error as Error).message
        }, { status: 500 });
    }
}