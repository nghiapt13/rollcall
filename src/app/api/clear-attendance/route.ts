import { NextRequest, NextResponse } from 'next/server';
import { google } from 'googleapis';
import { isAdminUser } from '@/config/authorized-users';

export async function POST(request: NextRequest) {
    try {
        const { email, confirmCode } = await request.json();

        console.log('=== X√ìA D·ªÆ LI·ªÜU CH·∫§M C√îNG ===');

        // Ki·ªÉm tra quy·ªÅn admin b·∫±ng email
        if (!email || !isAdminUser(email)) {
            console.log('‚ùå CH·∫∂N: Kh√¥ng c√≥ quy·ªÅn admin');
            return NextResponse.json({
                success: false,
                error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn admin. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.',
                unauthorized: true
            }, { status: 403 });
        }

        // Ki·ªÉm tra m√£ x√°c nh·∫≠n
        if (confirmCode !== 'DELETE MY DATA') {
            return NextResponse.json({
                success: false,
                error: 'M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng. Vui l√≤ng nh·∫≠p: DELETE MY DATA'
            }, { status: 400 });
        }

        // C·∫•u h√¨nh Google Sheets API
        const auth = new google.auth.GoogleAuth({
            credentials: {
                client_email: process.env.GOOGLE_CLIENT_EMAIL,
                private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
            },
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        const sheets = google.sheets({ version: 'v4', auth });
        const spreadsheetId = process.env.GOOGLE_SHEET_ID;

        // ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet ƒë·ªÉ ƒë·∫øm s·ªë d√≤ng
        const response = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: 'Sheet1!A:G',
        });

        const rows = response.data.values || [];
        console.log('üìä T·ªïng s·ªë d√≤ng:', rows.length);

        if (rows.length <= 1) {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x√≥a (ch·ªâ c√≥ header)');
            return NextResponse.json({
                success: true,
                message: 'Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng ƒë·ªÉ x√≥a',
                deletedRows: 0
            });
        }

        // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu tr·ª´ header (d√≤ng ƒë·∫ßu ti√™n)
        const startRow = 2; // D√≤ng th·ª© 2 (sau header)
        const endRow = rows.length; // D√≤ng cu·ªëi c√πng
        const deleteRange = `Sheet1!A${startRow}:F${endRow}`; // Thay ƒë·ªïi t·ª´ E th√†nh F
    
        console.log(`üóëÔ∏è ƒêang x√≥a d√≤ng t·ª´ ${startRow} ƒë·∫øn ${endRow}...`);
    
        await sheets.spreadsheets.values.clear({
            spreadsheetId,
            range: deleteRange,
        });

        const deletedRows = endRow - startRow + 1;
        console.log(`‚úÖ ƒê√£ x√≥a ${deletedRows} d√≤ng d·ªØ li·ªáu ch·∫•m c√¥ng`);

        return NextResponse.json({
            success: true,
            message: `ƒê√£ x√≥a th√†nh c√¥ng ${deletedRows} b·∫£n ghi ch·∫•m c√¥ng`,
            deletedRows: deletedRows,
            totalRowsBefore: rows.length,
            totalRowsAfter: 1 // Ch·ªâ c√≤n header
        });

    } catch (error) {
        console.error('‚ùå L·ªói x√≥a d·ªØ li·ªáu:', error);
        return NextResponse.json({
            success: false,
            error: 'L·ªói server: ' + (error as Error).message
        }, { status: 500 });
    }
}