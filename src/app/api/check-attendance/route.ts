import { NextRequest, NextResponse } from 'next/server';
import {prisma} from '@/lib/prisma';

export async function POST(request: NextRequest) {
    try {
        const { userId } = await request.json();

        console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i ch·∫•m c√¥ng');

        if (!userId) {
            return NextResponse.json({
                success: false,
                error: 'Thi·∫øu th√¥ng tin userId'
            }, { status: 400 });
        }

        // L·∫•y ng√†y h√¥m nay (ch·ªâ ng√†y, kh√¥ng c√≥ gi·ªù)
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

        console.log('üìÖ Ki·ªÉm tra ng√†y:', startOfDay.toLocaleDateString('vi-VN'));

        // T√¨m user b·∫±ng clerkId
        const user = await prisma.user.findUnique({
            where: { clerkId: userId }
        });

        if (!user) {
            return NextResponse.json({
                success: false,
                error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
            }, { status: 404 });
        }

        // T√¨m b·∫£n ghi ƒëi·ªÉm danh h√¥m nay
        const todayAttendance = await prisma.attendance.findFirst({
            where: {
                userId: user.id,  // ‚úÖ ƒê√∫ng - d√πng user.id t·ª´ database
                date: {
                    gte: startOfDay,
                    lt: endOfDay
                }
            },
            include: {
                user: {
                    select: {
                        email: true,
                        name: true
                    }
                }
            }
        });

        const hasCheckedInToday = !!todayAttendance;
        
        return NextResponse.json({
            success: true,
            hasCheckedInToday,
            todayRecord: todayAttendance ? {
                id: todayAttendance.id,
                email: todayAttendance.user.email,
                name: todayAttendance.user.name,
                checkInTime: todayAttendance.checkInTime,
                checkInPhoto: todayAttendance.checkInPhoto,
                checkOutTime: todayAttendance.checkOutTime,
                checkOutPhoto: todayAttendance.checkOutPhoto,
                date: todayAttendance.date
            } : null,
            checkDate: startOfDay.toLocaleDateString('vi-VN'),
            message: hasCheckedInToday 
                ? 'ƒê√£ check-in h√¥m nay' 
                : 'Ch∆∞a check-in h√¥m nay'
        });

    } catch (error: unknown) {
        const err = error as Error;
        console.error('‚ùå L·ªói ki·ªÉm tra attendance:', {
            message: err.message,
            timestamp: new Date().toISOString()
        });
        
        return NextResponse.json({
            success: false,
            error: 'L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i ƒëi·ªÉm danh',
            details: err.message
        }, { status: 500 });
    }
}